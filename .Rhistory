select(where(~ !any(is.na(.))))
breaks_5
library(tidyr)
clean_1 = breaks_1 %>%
gather(type, time, L1:L2)%>%
mutate(type = recode(type, L1 = "Lunch", L2 = "Lunch", B1 = "Break"))
median(breaks_1$B1)
clean_2 = breaks_2 %>%
gather(type, time, L1:L3)%>%
mutate(type = recode(type, L1 = "Lunch", L2 = "Lunch", L3 = "Lunch", B1 = "Break", B2 = "Break"))
clean_3 = breaks_3 %>%
gather(type, time, L1:L4)%>%
mutate(type = recode(type, L1 = "Lunch", L2 = "Lunch", L3 = "Lunch", L4 = "Lunch", B1 = "Break", B2 = "Break", B3 = "Break"))
clean_4 = breaks_4 %>%
gather(type, time, L1:L5)%>%
mutate(type = recode(type, L1 = "Lunch", L2 = "Lunch", L3 = "Lunch", L4 = "Lunch", L5 = "Lunch", B1 = "Break", B2 = "Break", B3 = "Break", B4 = "Break"))
clean_5 = breaks_5 %>%
gather(type, time, L1:L6)%>%
mutate(type = recode(type, L1 = "Lunch", L2 = "Lunch", L3 = "Lunch", L4 = "Lunch", L5 = "Lunch", L6 = "Lunch", B1 = "Break", B2 = "Break", B3 = "Break", B4 = "Break", B5 = "Break"))
L1<-breaks_0 %>%
select(`...1`,L1) %>%
rename("Total_time" = "L1") %>%
mutate(type = "1 Lunch, No Breaks")
L2<-clean_1 %>%
group_by(`...1`) %>%
summarise(Total_time= sum(time))%>%
mutate(type = "2 Lunches, 1 Break")
L3<-clean_2 %>%
group_by(`...1`) %>%
summarise(Total_time= sum(time))%>%
mutate(type = "3 Lunches, 2 Breaks")
L4<-clean_3 %>%
group_by(`...1`) %>%
summarise(Total_time= sum(time))%>%
mutate(type = "4 Lunches, 3 Breaks")
L5<-clean_4 %>%
group_by(`...1`) %>%
summarise(Total_time= sum(time))%>%
mutate(type = "5 Lunches, 4 Breaks")
L6<-clean_5 %>%
group_by(`...1`) %>%
summarise(Total_time= sum(time))%>%
mutate(type = "6 Lunches, 5 Breaks")
All_Lunches<-rbind(L1,L2,L3,L4,L5,L6)
CreateAllFacet <- function(df, col){
df$facet <- df[[col]]
temp <- df
temp$facet <- "All combined"
merged <-rbind(temp, df)
# ensure the facet value is a factor
merged[[col]] <- as.factor(merged[[col]])
return(merged)
}
df <- CreateAllFacet(All_Lunches, "type")
ggplot(df, aes(x = Total_time))+
geom_histogram(aes(fill = type), color= "black")+
facet_wrap(~facet, scales = "free_x")+
theme(legend.position = c(0.8, 0.2))+
theme_bw()+
labs(x= "Time (min)", y = "Count (Schools)", fill= "No. Lunches, No. Breaks")
ggsave("Figures/Figure A- histograms_lunch.jpg", width =8, height = 6, units = "in", dpi = 300)
breaks_2$total_time<- rowSums(breaks_2[,6:10])
breaks_2_tot_time<-breaks_2 %>%
group_by(total_time) %>%
summarise(count = n()) %>%
arrange(total_time)
breaks_2_tot_time %>%
ggplot(aes(x = total_time, y = count))+
geom_col()
sum0 = breaks_0%>%
summarise(mean = round(mean(L1),0),median = median(L1), q10p = quantile(L1, 0.10), q90p =quantile(L1,0.90))%>%
mutate(NService = 1) %>%
mutate(type = "Lunch") %>%
select(type, NService, mean, median, q10p, q90p)
sum0
sum1 = clean_1 %>%
group_by(type)%>%
summarise(mean = round(mean(time),0),median = median(time), q10p = quantile(time, 0.10), q90p =quantile(time, 0.90))%>%
mutate(NService = 2) %>%
select(type, NService, mean, median, q10p, q90p)
sum1
sum2 = clean_2 %>%
group_by(type)%>%
summarise(mean = round(mean(time),0),median = median(time), q10p = quantile(time, 0.10), q90p =quantile(time, 0.90))%>%
mutate(NService = 3) %>%
select(type, NService, mean, median, q10p, q90p)
sum2
sum3 = clean_3 %>%
group_by(type)%>%
summarise(mean = round(mean(time),0),median = median(time), q10p = quantile(time, 0.10), q90p =quantile(time, 0.90))%>%
mutate(NService = 4) %>%
select(type, NService, mean, median, q10p, q90p)
sum3
sum4 = clean_4 %>%
group_by(type)%>%
summarise(mean = round(mean(time),0),median = median(time), q10p = quantile(time, 0.10), q90p =quantile(time, 0.90))%>%
mutate(NService = 5) %>%
select(type, NService, mean, median, q10p, q90p)
sum4
sum5 = clean_5 %>%
group_by(type)%>%
summarise(mean = round(mean(time),0), median = median(time), q10p = quantile(time, 0.10), q90p =quantile(time, 0.90)) %>%
mutate(NService = 6) %>%
select(type, NService, mean, median, q10p, q90p)
sum5
sum_all = rbind(sum0, sum1, sum2, sum3, sum4, sum5)
sum_all
library(knitr)
library(kableExtra)
install.packages("magick")
webshot::install_phantomjs()
library(tidyverse)
library(reshape2)
library(cowplot)
#Negative Slopes
Neg_Slope_RTB<-(-0.0124) #Room Temperature
Neg_Slope_Ref<-(-0.0141) #Refrigeration
Neg_Slope_RT<-(-0.0088) #Refrigerated Tray
Neg_Slope_TIC<-(-0.0057) #Tray with Ice
Neg_Slope_TIP<-(-0.0072) #Tray with Ice Packs
Neg_Slope_CI<-(-0.0019) #Cooler with Ice
#Function to get the h (heat transfer coefficient)
get_h<-function(Neg_slope, rho = 1.033, C = 4.2 , V = 0.236, A = 0.004275){
neg_h =  ((Neg_slope*rho*C*V)/A)
return(- neg_h)
}
#Getting the Heat Transfer Coefficients for each Temp
h_RTB = get_h(Neg_slope = Neg_Slope_RTB)
h_ref = get_h(Neg_slope = Neg_Slope_Ref)
h_RT = get_h(Neg_slope = Neg_Slope_RT)
h_TIC = get_h(Neg_slope = Neg_Slope_TIC)
h_TIP = get_h(Neg_slope = Neg_Slope_TIP)
h_CI = get_h(Neg_slope = Neg_Slope_CI)
get_temp<-function(h, To, Tinf, time,  A =0.004275,rho =1.033, C= 4.2, V = 0.236 ){
#Time in minutes
#Tinf = External Temp
#To = Initial temperature of the milk
# h = convection trans coeff for that codition
return (exp(-(h*A/rho*C*V)*(time))*(To-Tinf)+Tinf)
}
#Function to get the temperature profile from an external temperature vector
predict_temp_fromProf<-function(Time_Temp_Prof, Initial_Temp,h_condition){
Time_Temp_Profile<-Time_Temp_Prof
Temp_Initial = Initial_Temp
Temp_V<-c()
for (i in 1:length(Time_Temp_Profile)){
T_inf<-Time_Temp_Profile[i]
if (i == 1){
New_Temp = Temp_Initial
}else if (i == 2){
New_Temp = get_temp(h = h_condition, To = Temp_Initial, Tinf =  T_inf, time = 1)
}else{
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
}
Temp_V<-c(Temp_V, New_Temp)
}
return(Temp_V)
}
#Generate Temperature Conditions
#Temperatures are a normal distribution
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature)
return (Time_Temp_df)
}
Create_Temperature_Profile_days<-function(First_Cond, Second_Cond,
First_Cond_Total_Time,Second_Cond_Total_Time,
First_Cond_Mean_Temperature, First_Cond_SD_Temperature,
Second_Cond_Mean_Temperature, Second_Cond_SD_Temperature,
Interval, Cycles){
First_Cond_Temps<-Time_Temp_Creation_Var(Total_Time = First_Cond_Total_Time, Interval = Interval ,
Mean_Temperature = First_Cond_Mean_Temperature,
SD_Temperature = First_Cond_SD_Temperature)
Second_Cond_Temps<-Time_Temp_Creation_Var(Total_Time = Second_Cond_Total_Time, Interval = Interval ,
Mean_Temperature = Second_Cond_Mean_Temperature,
SD_Temperature = Second_Cond_SD_Temperature)
First_Cond_Temps_Desc<-rep(First_Cond,length(First_Cond_Temps))
Second_Cond_Temps_Desc<-rep(Second_Cond,length(Second_Cond_Temps))
Temp_Vector<-c()
Cond_Vec<-c()
for (i in 1:Cycles){
Temp_Vector<-c(Temp_Vector,First_Cond_Temps,Second_Cond_Temps)
Cond_Vec<-c(Cond_Vec,First_Cond_Temps_Desc,Second_Cond_Temps_Desc)
}
Simulated_Conditions<-data.frame("Rtemp" = Temp_Vector,
"Condition" = Cond_Vec)
return(Simulated_Conditions)
}
predict_full_milk_temp<-function(df, Temp_Initial){
Temp_Milk_Vectors<-c()
Temp_Milk_Vectors<-c(Temp_Initial)
T_inf = df$Rtemp[1]
New_Temp = Temp_Initial
for (i in 2:length(df$Rtemp)){
#Selecting the condition that applies
if (df$Condition[i] == "Room Temp"){
h_condition = h_RTB
} else if (df$Condition[i] == "Refrigeration"){
h_condition = h_ref
} else if (df$Condition[i] == "Refrigerated Tray"){
h_condition = h_RT
} else if (df$Condition[i] == "Tray With Ice Packs"){
h_condition = h_TIP
} else if (df$Condition[i] == "Tray With Ice"){
h_condition = h_TIC
} else if (df$Condition[i] == "Cooler with Ice"){
h_condition = h_CI
}
#Checking if condition changed
if(df$Condition[i] != df$Condition[i-1]){
Condition_Change = 1
T_inf = df$Rtemp[i]
} else {
Condition_Change = 0
}
#Predicting the new temperature
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
Temp_Milk_Vectors<-c(Temp_Milk_Vectors,New_Temp)
}
return(Temp_Milk_Vectors)
}
#Worst case scenario 124, 1314.125 min Room Temp - 21 hr 55 min Refrigerated Overnight"
Time_Temp_Df<-Create_Temperature_Profile_days(First_Cond = "Room Temp",
Second_Cond = "Refrigeration",
First_Cond_Total_Time = 124,
Second_Cond_Total_Time = 1314,
First_Cond_Mean_Temperature = 22.1,
First_Cond_SD_Temperature = 0,#0.77,
Second_Cond_Mean_Temperature= 3.71,
Second_Cond_SD_Temperature = 0,#1.04,
Interval  =1,
Cycles = 5)
Temp_Milk_Vectors<-predict_full_milk_temp(df = Time_Temp_Df, Temp_Initial = 4.2)
Df_RT_MT<-data.frame("RoomTemp" = Time_Temp_Df$Rtemp,
"MilkTemp" = Temp_Milk_Vectors,
"Time" = 1:length(Temp_Milk_Vectors))
Df_RT_MT_melted<-melt(Df_RT_MT, id.vars = "Time")
ggplot(data = Df_RT_MT_melted, aes(x = Time, y = value, color = variable))+
geom_line(size = 1)+
theme_bw()+
labs(x = "Time (min)", y = "Temperature (°C)", title= "125 min Room Temp - 21 hr 55 min Refrigerated Overnight")+
scale_color_discrete(name = "Temperature Profile")
ggsave("Pedicted Time and Temp Profiles/PredictedRT.png", height = 3, width = 8, dpi = 300)
#Worst case scenario 124, 1314.125 min Ref Tray - 21 hr 55 min Refrigerated Overnight"
Time_Temp_Df_RT<-Create_Temperature_Profile_days(First_Cond = "Refrigerated Tray",
Second_Cond = "Refrigeration",
First_Cond_Total_Time = 124,
Second_Cond_Total_Time = 1314,
First_Cond_Mean_Temperature = 22.1,
First_Cond_SD_Temperature = 0,#0.77,
Second_Cond_Mean_Temperature= 3.71,
Second_Cond_SD_Temperature = 0,#1.04,
Interval  =1,
Cycles = 5)
Temp_Milk_RT<-predict_full_milk_temp(Time_Temp_Df_RT, Temp_Initial = 4)
Df_RT_MT_RT<-data.frame("RoomTemp" = Time_Temp_Df$Rtemp,
"MilkTemp" = Temp_Milk_RT,
"Time" = 1:length(Temp_Milk_Vectors))
Df_RT_MT_RT_melted<-melt(Df_RT_MT_RT, id.vars = "Time")
ggplot(data = Df_RT_MT_RT_melted, aes(x = Time, y = value, color = variable))+
geom_line(size = 1)+
theme_bw()+
labs(x = "Time (min)", y = "Temperature (°C)", title= "125 min Refrigerated Tray - 21 hr 55 min Refrigerated Overnight")+
scale_color_discrete(name = "Temperature Profile")
ggsave("Pedicted Time and Temp Profiles/PredictedRefTray.png", height = 3, width = 8, dpi = 300)
#Worst case scenario 124, 1314.125 min Tray with ice packs - 21 hr 55 min Refrigerated Overnight"
Time_Temp_Df_TIP<-Create_Temperature_Profile_days(First_Cond = "Tray With Ice Packs",
Second_Cond = "Refrigeration",
First_Cond_Total_Time = 124,
Second_Cond_Total_Time = 1314,
First_Cond_Mean_Temperature = 22.1,
First_Cond_SD_Temperature = 0,#0.77,
Second_Cond_Mean_Temperature= 3.71,
Second_Cond_SD_Temperature = 0,#1.04,
Interval  =1,
Cycles = 5)
Temp_Milk_TIP<-predict_full_milk_temp(Time_Temp_Df_TIP, Temp_Initial = 4.2)
Df_RT_MT_TIP<-data.frame("RoomTemp" = Time_Temp_Df$Rtemp,
"MilkTemp" = Temp_Milk_TIP,
"Time" = 1:length(Temp_Milk_Vectors))
Df_RT_MT_TIP_melted<-melt(Df_RT_MT_TIP, id.vars = "Time")
ggplot(data = Df_RT_MT_TIP_melted, aes(x = Time, y = value, color = variable))+
geom_line(size = 1)+
theme_bw()+
labs(x = "Time (min)", y = "Temperature (°C)", title= "125 min Tray with Ice Packs - 21 hr 55 min Refrigerated Overnight")+
scale_color_discrete(name = "Temperature Profile")
ggsave("Pedicted Time and Temp Profiles/PredictedTIP.png", height = 3, width = 8, dpi = 300)
Actual_Temps<-read.csv("Validation Milk Temps.csv")
#loading libraries
library(reshape2)
library(ggplot2)
#Standard Inputs
rho <-1.033 #kg/L
C <- 4.2 #kj/KgC°
V <- 0.236 #L
A <- 0.004275 #m2
get_h<-function(Neg_slope, rho = 1.033, C = 4.2 , V = 0.236, A = 0.004275){
neg_h = ((Neg_slope*rho*C*V)/A)
return(-neg_h)
}
#Negative Slopes
Neg_Slope_RTB<-(-0.0124) #Room Temperature
Neg_Slope_Ref<-(-0.0088) #Refrigeration
Neg_Slope_RT<-(-0.0088) #Refrigerated Tray
Neg_Slope_TIC<-(-0.0057) #Tray with Ice
Neg_Slope_TIP<-(-0.0072) #Tray with Ice Packs
Neg_Slope_CI<-(-0.0008) #Cooler with Ice
#Getting the Heat Transfer Coefficients for each Temp
h_RTB = get_h(Neg_slope = Neg_Slope_RTB)
h_ref = get_h(Neg_slope = Neg_Slope_Ref)
h_RT = get_h(Neg_slope = Neg_Slope_RT)
h_TIC = get_h(Neg_slope = Neg_Slope_TIC)
h_TIP = get_h(Neg_slope = Neg_Slope_TIP)
h_CI = get_h(Neg_slope = Neg_Slope_CI)
#Function to get temperature as a constant time and temperature
get_temp<-function(h, To, Tinf, time,  A =0.004275,rho =1.033, C= 4.2, V = 0.236 ){
#Time in minutes
#Tinf = External Temp
#To = Initial temperature of the milk
# h = convection trans coefficient for that condition
#time = time in minutes (because negative slope is per min)
return (exp(-(h*A/rho*C*V)*(time))*(To-Tinf)+Tinf)
}
#Constant outside temperature
#Initial temp = the temp of the milk when entering that condition
#Room Temp = constant temperature of the room
#Total min: the length that the milk is at that room temperature
#h_condition = the heat trasnfer coefficient of that condition
predict_temp<-function(Initial_Temp, Room_temp, Total_min, h_condition){
#Constant outside temperature
#Initial temp = the temp of the milk when entering that condition
#Room Temp = constant temperature of the room
#Total min: the length that the milk is at that room temperature
#h_condition = the heat transfer coefficient of that condition
#Returns a vector of temperatures
#redifining terms is redundant but helps keep track
Total_Time_min = Total_min
Temp_Initial = Initial_Temp
T_inf = Room_temp
Temp_V<-c()
for (i in 1:Total_Time_min){
if (i == 1){
New_Temp = Temp_Initial
}else if (i == 2){
New_Temp = get_temp(h = h_condition, To = Temp_Initial, Tinf =  T_inf, time = 1)
}else{
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
}
Temp_V<-c(Temp_V, New_Temp)
}
return (Temp_V)
#returns a vector of internal temperatures in 1 minute intervals.
}
#Example of how this could work.
predict_temp(Initial_Temp = 4.5,Room_temp = 22, Total_min = 42, h_condition = h_RTB)
#Predicting the temperature from a complete time and temperature profile.
predict_temp_fromProf<-function(Time_Temp_Prof, Initial_Temp,h_condition){
#Time_Temp_Prof = a vector of temperatures in 1 minute intervals
#initial temp = the initial temperature of the milk
#h_condition = the h condition
Time_Temp_Profile<-Time_Temp_Prof
Temp_Initial = Initial_Temp
Temp_V<-c()
for (i in 1:length(Time_Temp_Profile)){
T_inf<-Time_Temp_Profile[i]
if (i == 1){
New_Temp = Temp_Initial
}else if (i == 2){
New_Temp = get_temp(h = h_condition, To = Temp_Initial, Tinf =  T_inf, time = 1)
}else{
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
}
Temp_V<-c(Temp_V, New_Temp)
}
return(Temp_V)
}
#This function creates a room temperature where the temperature varies based on a mean and a standard deviation. The output is a vector of temperatures that could be an input to the function defined earlier in this chunk.
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
calc_rmse=function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
calc_bias = function(actual,predicted){
mean(predicted - actual)
}
Condition_Data<-read.csv("Bevier Trail Data/Bevier_Trial_Temps_External_50min.csv")
Condition_Data_InternalMilk<-read.csv("Bevier Trail Data/Bevier_Trial_Temps_Internal_50min.csv")
Predicted_RTB<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data_InternalMilk$Ambient.Temperature[1], h_condition = h_RTB)
Predicted_RT<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Refrigerated.Tray, Initial_Temp = Condition_Data_InternalMilk$Refrigerated.Tray[1], h_condition = h_RT)
Predicted_TI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice[1], h_condition = h_TIC)
Predicted_TIP<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice.Packs, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice.Packs[1], h_condition = h_TIP)
Predicted_CI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Cooler.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Cooler.with.Ice[1], h_condition = h_CI)
Predicted_ref<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Refrigeration, Initial_Temp = Condition_Data_InternalMilk$Refrigeration[1], h_condition = h_ref)
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Refrigerated.Tray, predicted = Predicted_RT[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice, predicted = Predicted_TI[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice.Packs, predicted = Predicted_TIP[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Cooler.with.Ice, predicted = Predicted_CI[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Refrigeration, predicted = Predicted_ref[1:50])
calc_bias(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB[1:50])
calc_bias(actual = Condition_Data_InternalMilk$Refrigerated.Tray, predicted = Predicted_RT[1:50])
calc_bias(actual = Condition_Data_InternalMilk$Tray.with.Ice, predicted = Predicted_TI[1:50])
calc_bias(actual = Condition_Data_InternalMilk$Tray.with.Ice.Packs, predicted = Predicted_TIP[1:50])
calc_bias(actual = Condition_Data_InternalMilk$Cooler.with.Ice, predicted = Predicted_CI[1:50])
calc_bias(actual = Condition_Data_InternalMilk$Refrigeration, predicted = Predicted_ref[1:50])
PredictionDf<-data.frame("Time" = c(1:50),
"Ambient.Temperature" = Predicted_RTB,
"Cooler.with.Ice" = Predicted_CI,
"Tray.with.Ice"= Predicted_TI,
"Tray.with.Ice.Packs"= Predicted_TIP,
"Refrigerated.Tray" = Predicted_RT,
"Refrigeration" = Predicted_ref)
Internal_DF<-reshape2::melt(Condition_Data_InternalMilk, id.vars = "Time")
Internal_DF$type<-"Observed"
Predicted_DF<-reshape2::melt(PredictionDf, id.vars = "Time")
Predicted_DF$type<-"Predicted"
Predicted_vs_Observed<-rbind(Internal_DF,Predicted_DF)
Predicted_vs_Observed$variable<-as.character(Predicted_vs_Observed$variable)
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Ambient.Temperature"] <- "Ambient Temperature"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Cooler.with.Ice"] <- "Cooler with Ice"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Tray.with.Ice"] <- "Tray with Ice"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Tray.with.Ice.Packs"] <- "Tray with Ice Packs"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Refrigerated.Tray"] <- "Refrigerated Tray"
#RMSE and Text
dat_text <- data.frame(
label = c("RMSE: 0.72", "RMSE: 0.06", "RMSE:0.50", "RMSE: 0.31", "RMSE: 0.12", "RMSE: 0.19"),
variable   = c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"),
x     = c(30, 30, 30,30,30,20),
y     = c(9, 2.15, 3,3,4,14)
)
dat_text_h <- data.frame(
label = c("h: 2.97", "h: 0.19", "h: 1.37", "h: 1.72", "h: 2.11", "h = 2.11"  ),
variable   = c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"),
x     = c(30, 30, 30,30,30, 20),
y     = c(3, 2.08, 2.5,2.4,3.4, 13.5)
)
dat_text$variable<-factor(dat_text$variable, levels= c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"))
dat_text_h$variable<-factor(dat_text_h$variable, levels= c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"))
Predicted_vs_Observed$variable<-factor(Predicted_vs_Observed$variable, levels= c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"))
ggplot(Predicted_vs_Observed, aes(x = Time))+
#geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type, linetype = type), size=1)+
facet_wrap(~variable,scales = "free_y")+
theme_bw()+
labs(y = "Temperature (°C)", x = "Time (min)", color = "Observed vs Predicted",linetype = "Observed vs Predicted", title = "Fitted Data, 50 minutes")+
geom_text(data    = dat_text,
mapping = aes(x = x, y = y, label = label), size =3.5)+
geom_text(data    = dat_text_h,
mapping = aes(x = x, y = y, label = label), size =3.5)+
scale_color_manual(values = c("#00AFBB", "#FC4E07"))
ggsave("Figures/Training Set Plot.jpg", width =8, height = 5, units = "in", dpi = 300)
Condition_Data<-read.csv("Bevier Trail Data/Bevier_Trial_Temps_External_30min.csv")
Condition_Data_InternalMilk<-read.csv("Bevier Trail Data/Bevier_Trial_Temps_Internal_30min.csv")
Predicted_RTB<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data_InternalMilk$Ambient.Temperature[1], h_condition = h_RTB)
Predicted_RT<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Refrigerated.Tray, Initial_Temp = Condition_Data_InternalMilk$Refrigerated.Tray[1], h_condition = h_RT)
Predicted_TI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice[1], h_condition = h_TIC)
Predicted_TIP<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice.Packs, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice.Packs[1], h_condition = h_TIP)
Predicted_CI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Cooler.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Cooler.with.Ice[1], h_condition = h_CI)
Predicted_ref<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Refrigeration, Initial_Temp = Condition_Data_InternalMilk$Refrigeration[1], h_condition = h_ref)
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB)
calc_rmse(actual = Condition_Data_InternalMilk$Refrigerated.Tray, predicted = Predicted_RT)
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice, predicted = Predicted_TI)
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice.Packs, predicted = Predicted_TIP)
calc_rmse(actual = Condition_Data_InternalMilk$Cooler.with.Ice, predicted = Predicted_CI)
calc_rmse(actual = Condition_Data_InternalMilk$Refrigeration, predicted = Predicted_ref)
calc_bias(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB)
calc_bias(actual = Condition_Data_InternalMilk$Refrigerated.Tray, predicted = Predicted_RT)
calc_bias(actual = Condition_Data_InternalMilk$Tray.with.Ice, predicted = Predicted_TI)
calc_bias(actual = Condition_Data_InternalMilk$Tray.with.Ice.Packs, predicted = Predicted_TIP)
calc_bias(actual = Condition_Data_InternalMilk$Cooler.with.Ice, predicted = Predicted_CI)
calc_bias(actual = Condition_Data_InternalMilk$Refrigeration, predicted = Predicted_ref)
PredictionDf<-data.frame("Time" = c(1:30),
"Ambient.Temperature" = Predicted_RTB,
"Cooler.with.Ice" = Predicted_CI,
"Tray.with.Ice"= Predicted_TI,
"Tray.with.Ice.Packs"= Predicted_TIP,
"Refrigerated.Tray" = Predicted_RT,
"Refrigeration" = Predicted_ref)
library(reshape2)
library(ggplot2)
Internal_DF<-reshape2::melt(Condition_Data_InternalMilk, id.vars = "Time")
Internal_DF$type<-"Observed"
Predicted_DF<-reshape2::melt(PredictionDf, id.vars = "Time")
Predicted_DF$type<-"Predicted"
Predicted_vs_Observed<-rbind(Internal_DF,Predicted_DF)
Predicted_vs_Observed$variable<-as.character(Predicted_vs_Observed$variable)
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Ambient.Temperature"] <- "Ambient Temperature"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Cooler.with.Ice"] <- "Cooler with Ice"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Tray.with.Ice"] <- "Tray with Ice"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Tray.with.Ice.Packs"] <- "Tray with Ice Packs"
Predicted_vs_Observed$variable[Predicted_vs_Observed$variable == "Refrigerated.Tray"] <- "Refrigerated Tray"
#RMSE and Text
dat_text <- data.frame(
label = c("RMSE: 0.43", "RMSE: 0.06", "RMSE:1.15", "RMSE: 0.64", "RMSE: 0.41", "RMSE: 1.25"),
variable   = c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"),
x     = c(20,20,20,20,20,10),
y     = c(3, 2.55, 3,2.5,2.5,18)
)
dat_text$variable<-factor(dat_text$variable, levels= c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"))
Predicted_vs_Observed$variable<-factor(Predicted_vs_Observed$variable, levels= c("Ambient Temperature","Cooler with Ice","Tray with Ice","Tray with Ice Packs","Refrigerated Tray","Refrigeration"))
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_line(aes(y = value, color = type, linetype = type), size=1)+
facet_wrap(~variable, scales = "free_y")+
theme_bw()+
labs(y = "Temperature (°C)", x = "Time (min)", color = "Observed vs Predicted",linetype = "Observed vs Predicted", title = "Testing Data, 30 minutes")+
geom_text(data    = dat_text,
mapping = aes(x = x, y = y, label = label), size =3.5)+
scale_color_manual(values = c("#00AFBB", "#FC4E07"))
ggsave("Figures/Testing Set.jpg", width =8, height = 5, units = "in", dpi = 300)
Actual_Temps<-read.csv("Validation Milk Temps.csv")
